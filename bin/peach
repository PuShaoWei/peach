#! /usr/bin/env node
/**
 * 主入口，程序控制
 */

var fs = require('fs');
var path = require('path');
var request = require('request');
var inquirer = require('inquirer');
var program = require('commander');
var chalk = require('chalk');
var gutil = require('gulp-util');
var del = require('del');
var _ = require('lodash');
var Table = require('cli-table');
var fse = require('fs-extra');
var $ = require('gulp-load-plugins')({lazy: true});
var autoprefixer = require('autoprefixer');
var ora = require('ora')

var Util = require('../lib/util');
var getGitStatus = require('../lib/util/git_status');

var App = require('../lib/create/task/app');
var MModule = require('../lib/create/task/module');
var Page = require('../lib/create/task/page');
var Widget = require('../lib/create/task/widget');
var builder = require('../lib/build');

var addReportPath = '/api/commands';
var deleteReportPath = '/api/delete';
var getVersionPath = '/api/version';
var userHome = Util.homedir();
var userName = process.env.USER || path.basename(userHome);
var config = Util.getConfig();
var setting = Util.getSetting();

// 数据上报
function report (command, reportPath, args, processParams, cb) {
  var reportBlacklist = config.report_black_list ? config.report_black_list : [];
  var requestParams = {
    cmd: command,
    time: new Date().getTime(),
    user: Util.getConfig().user_name,
    author: Util.getConfig().user_name,
    args: args
  };
  if (typeof processParams === 'function') {
    processParams(requestParams);
  }
  if (reportBlacklist.indexOf(requestParams.appId) >= 0
    || reportBlacklist.indexOf(requestParams.appName) >= 0
    || reportBlacklist.indexOf(requestParams.app) >= 0) {
    return;
  }
  if (typeof cb !== 'function') {
    cb = function () {};
  }
   cb(body);
   return;

  request.post(setting.report_url + reportPath, {
    form: requestParams,
    timeout: 5000
  }, function (err, res, body) {
    if (err) {
      console.log(chalk.red('  上报失败'));
      cb();
      return;
    }
    if (res.statusCode === 200 || res.statusCode === 201) {
      try {
        body = JSON.parse(body);
      } catch (e) {
        console.log(chalk.red('  上报失败'));
      }
    } else {
      console.log(chalk.red('  上报失败'));
    }
    cb(body);
  });
}

// 打印一下peach的Logo
function printpeach () {
  var peachText = fs.readFileSync(path.join(Util.getRootPath(), 'peach.txt'));
  console.log(gutil.colors.blue(String(peachText)));
}

// 检测peach版本
function checkpeachVersion (successCb, errorCb) {
   errorCb && errorCb(err);
   return;
  request.get(setting.report_url + getVersionPath, function (err, res, body) {
    if (err) {
      errorCb && errorCb(err);
      return;
    }
    if (res.statusCode === 200 || res.statusCode === 201) {
      try {
        body = JSON.parse(body);
        if (body.no === 0) {
          var versionServer = body.data.v;
          var versionNative = Util.getPkgInfo().version;
          var compareResult = Util.compareVersion(versionNative, versionServer);
          successCb(versionServer, versionNative, compareResult);
        } else {
          errorCb && errorCb(body);
        }
      } catch (e) {
        errorCb && errorCb(e);
      }
    } else {
      errorCb && errorCb();
    }
  });
}
// 新版本更新提醒功能
function remindNewVersion (cb) {
  return;
  var remindFile = path.join(Util.getpeachPath(), '.remind.json');
  var remindInfo = {};
  if (Util.existsSync(remindFile)) {
    try {
      remindInfo = JSON.parse(String(fs.readFileSync(remindFile)));
    } catch (ex) {
      remindInfo = {};
    }
  }
  if (!remindInfo.update) {
    remindInfo.update = {};
  }
  var updateInfo = remindInfo.update;
  if (!updateInfo.date || !Util.isToday(updateInfo.date)) {
    checkpeachVersion(function (versionServer, versionNative, compareResult) {
      if (compareResult === 1) {
        var prompt = [];
        prompt.push({
          type: 'confirm',
          name: 'isUpdate',
          message: '检测到有新版本的peach，版本号为' + versionServer + '，在修复问题的同时，新增了许多实用功能，你不想更新一下么？',
          default: true
        });
        inquirer.prompt(prompt, function (answers) {
          if (answers.isUpdate) {
            console.log();
            const spinner = ora('正在自动安装更新...').start()
            installpeach({
              version: versionServer,
              isDebug: false,
              onSuccess: function () {
                remindInfo.update.date = new Date().getTime();
                fs.writeFileSync(remindFile, JSON.stringify(remindInfo, null, 2));
                cb();
              },
              onError: function () {
                remindInfo.update.date = new Date().getTime();
                fs.writeFileSync(remindFile, JSON.stringify(remindInfo, null, 2));
              }
            }, spinner);
          } else {
            remindInfo.update.date = new Date().getTime();
            fs.writeFileSync(remindFile, JSON.stringify(remindInfo, null, 2));
            cb();
          }
        });
      } else {
        remindInfo.update.date = new Date().getTime();
        fs.writeFileSync(remindFile, JSON.stringify(remindInfo, null, 2));
        cb();
      }
    }, function () {
      cb();
    });
  } else {
    cb();
  }
}

// 安装某一版本peach
function installpeach (installParams, spinner) {
  var exec = require('child_process').exec;
  var shellCode = 'npm install -g peach@' + installParams.version + ' --registry=http://registry.npm.taobao.org --disturl=http://npm.taobao.org/mirrors/node';
  // 非windows
  if (process.platform !== 'win32') {
    var nodeInstallPath = process.execPath;
    if (nodeInstallPath === '\/usr\/local\/bin\/node') {
      shellCode = 'sudo ' + shellCode;
    }
  }
  var child = exec(shellCode,
    function (error, stdout, stderr) {
      spinner && spinner.stop()
      if (installParams.isDebug) {
        console.log('stdout: ' + stdout);
        console.log('stderr: ' + stderr);
      }
      if (error !== null) {
        if (installParams.isDebug) {
          console.log('Install error: ' + error);
        }
        console.log();
        console.log(chalk.red('  安装失败，你可以自行执行以下命令来执行安装：'));
        console.log(chalk.red('  ' + shellCode));
        installParams.onError && installParams.onError();
        return;
      }
      console.log();
      console.log(chalk.green('  安装成功，当前peach版本' + installParams.version));
      console.log();
      installParams.onSuccess && installParams.onSuccess();
    });
}

// 读取版本号
program
  .version(Util.getPkgInfo().version);

// Command: peach init [url]
program
  .command('init [url]')
  .description('初始化peach')
  .action(function (url) {
    remindNewVersion(function () {
      console.log(chalk.magenta('  Allo ' + userName + '! 开始愉快工作吧~'));
        if (!url) {
          url = process.cwd();
          console.log('  即将设置工作目录为当前目录！');
        } else {
          console.log('  即将设置工作目录为：', url);
        }
        console.log();
        var prompt = [];
        if (!config.work_space) {
          config.work_space = url;
        } else {
          if (config.work_space !== url) {
            prompt.push({
              type: 'confirm',
              name: 'needNewWorkSpace',
              message: '已经设置过工作目录' + config.work_space + '，是否要以新目录为工作目录？',
              default: false
            });
          }
        }
        prompt.push({
          type: 'input',
          name: 'userName',
          message: '雁过留声，人过留名~~',
          default: userName
        });
        inquirer.prompt(prompt, function (answers) {
          if (answers.needNewWorkSpace) {
            config.work_space = url;
          }
          config.user_name = answers.userName;
          Util.setConfig(config);
        });
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach init');
    console.log();
  });

// Command: peach app [appName]
program
  .command('app [appName]')
  .alias('a')
  .description('创建新的项目')
  .option('--name [appName]', '项目名称')
  .option('--description [appDescription]', '项目描述')
  .option('--sass', '启用sass')
  .option('--less', '启用less')
  .option('--template [templateName]', '设置模板')
  .option('--debug', '打印调试信息')
  .action(function(appName, option) {
    remindNewVersion(function () {
      var app = new App({
        appName: appName || option.name,
        description: option.description,
        sass: option.sass,
        less: option.less,
        tmpName: option.template
      });
      // 创建完项目后进行数据上报
      app.create(function () {
        var argv = [].slice.call(arguments);
        report('app', addReportPath, argv, function (params) {
          var appConfPath = app.destinationPath(argv[0], 'app-conf.js');
          var commonModuleConfPath = app.destinationPath(argv[0], 'gb', 'module-conf.js');
          var commonModuleConf = require(commonModuleConfPath);
          params.appName = argv[0];
          params.appId = require(appConfPath).appId;
          params.commonModuleId = commonModuleConf.moduleId;
          params.commonModuleName = commonModuleConf.module;
        }, function (body) {
          if (option.debug) {
            console.log(body);
          }
        });
      });
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach app cx');
    console.log('    $ peach a cx');
    console.log();
  });

// Command: peach module [moduleName]
program
  .command('module [moduleName]')
  .alias('m')
  .description('创建新的模块')
  .option('--name [appName]', '模块名称')
  .option('--description [moduleDescription]', '模块描述')
  .option('--sass', '启用sass')
  .option('--less', '启用less')
  .option('--debug', '打印调试信息')
  .action(function(moduleName, option) {
    remindNewVersion(function () {
      if (moduleName) {
        // 支持一次性创建多个模块
        var moduleList = moduleName.split(',');
        var promises = [];
        promises = moduleList.map(function (item) {
          return createModule.bind(null, item, option);
        });
        promises.reduce(function (prev, curr) {
          return prev.then(function () {
            return curr();
          });
        }, Promise.resolve('start')).catch(function (e) {
          if (e) {
            console.log(e.plugin);
            if (e.stack) {
              console.log(e.stack);
            }
          }
        });
      } else {
        createModule(moduleName, option);
      }
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach module my');
    console.log('    $ peach m my');
    console.log('    $ peach m my,hello');
    console.log();
  });

// 创建单个模块
function createModule (moduleName, option) {
  return new Promise(function (resolve, reject) {
    var mmodule = new MModule({
      moduleName: moduleName || option.name,
      moduleDescription: option.description,
      sass: option.sass,
      less: option.less
    });
    var appConfPath = mmodule.destinationPath('app-conf.js');
    if (!fs.existsSync(appConfPath)) {
      console.log(chalk.red('  出错了，当前目录没有app-conf.js，请检查当前目录是否是项目目录！'));
      reject();
      return;
    }
    mmodule.create(function () {
      var argv = [].slice.call(arguments);
      var appConf = require(appConfPath);
      if (appConf) {
        report('module', addReportPath, argv, function (params) {
          var moduleConfPath = mmodule.destinationPath(argv[0], 'module-conf.js');
          params.moduleName = argv[0];
          params.moduleId = require(moduleConfPath).moduleId;
          params.appName = appConf.app;
          params.appId = appConf.appId;
        }, function (body) {
          if (option.debug) {
            console.log(body);
          }
          resolve();
        });
      }
    });
  });
}

// Command: peach page [pageName]
program
  .command('page [pageName]')
  .alias('pa')
  .description('创建新的页面')
  .option('--name [pageName]', '页面名称')
  .option('--description [pageDescription]', '页面描述')
  .option('--sass', '启用sass')
  .option('--less', '启用less')
  .option('--remote [remoteName]', '选择域')
  .option('--debug', '打印调试信息')
  .action(function(pageName, option) {
    remindNewVersion(function () {
      var page = new Page({
        pageName: pageName || option.name,
        description: option.description,
        sass: option.sass,
        less: option.less,
        remote: option.remote
      });
      var moduleConfPath = page.destinationPath('module-conf.js');
      var appConfPath = path.join(path.resolve(page.destinationRoot(), '..'), 'app-conf.js');
      if (!fs.existsSync(moduleConfPath)) {
        console.log(chalk.red('  出错了，当前目录没有module-conf.js，请检查当前目录是否是一个模块目录！'));
        return;
      }
      // 创建完页面后提交统计
      page.create(function () {
        var argv = [].slice.call(arguments);
        var appConf = require(appConfPath);
        var moduleConf = require(moduleConfPath);
        if (appConf) {
          report('page', addReportPath, argv, function (params) {
            params.moduleName = moduleConf.module;
            params.moduleId = moduleConf.moduleId;
            params.appName = appConf.app;
            params.appId = appConf.appId;
            params.page = argv[0];
          }, function (body) {
            if (option.debug) {
              console.log(body);
            }
          });
        }
      });
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach page shop');
    console.log('    $ peach pa shop');
    console.log();
  });

// Command: peach widget [widgetName]
program
  .command('widget [widgetName]')
  .alias('w')
  .option('--name [widgetName]', '组件名称')
  .option('--description [widgetDescription]', '组件描述')
  .option('--sass', '启用sass')
  .option('--less', '启用less')
  .option('--cms', '指定这是供CMS使用的楼层组件')
  .option('--debug', '打印调试信息')
  .description('创建新的组件')
  .action(function(widgetName, option) {
    remindNewVersion(function () {
      var widget = new Widget({
        widgetName: widgetName || option.name,
        description: option.description,
        sass: option.sass,
        less: option.less,
        cms: option.cms
      });
      var moduleConfPath = widget.destinationPath('module-conf.js');
      var appConfPath = path.join(path.resolve(widget.destinationRoot(), '..'), 'app-conf.js');
      if (!fs.existsSync(moduleConfPath)) {
        console.log(chalk.red('  出错了，当前目录没有module-conf.js，请检查当前目录是否是一个模块目录！'));
        return;
      }
      widget.create(function () {
        var argv = [].slice.call(arguments);
        var appConf = require(appConfPath);
        var moduleConf = require(moduleConfPath);
        if (appConf) {
          report('widget', addReportPath, argv, function (params) {
            params.moduleName = moduleConf.module;
            params.moduleId = moduleConf.moduleId;
            params.appName = appConf.app;
            params.appId = appConf.appId;
            params.widget = argv[0];
          }, function (body) {
            if (option.debug) {
              console.log(body);
            }
          });
        }
      });
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach widget topbar');
    console.log('    $ peach w topbar');
    console.log();
  });

// Command: peach widget-publish [widgetName]
program
  .command('widget-publish [widgetName]')
  .alias('wp')
  .option('-w, --widget [widgetName]', '组件名称')
  .option('-i, --id [id]', '组件id')
  .description('发布/更新组件到组件库')
  .action(function (widgetName, option) {
    remindNewVersion(function () {
      widgetName = widgetName || option.widget;
      widgetId = option.id;
      var mdouleConfPath = path.join(process.cwd(), 'module-conf.js');
      if (!Util.existsSync(mdouleConfPath)) {
        console.log(chalk.red('  出错了，当前目录没有module-conf.js，请检查当前目录是否是一个模块目录！'));
        return;
      }
      var modulePath = process.cwd();
      var moduleConf = require(mdouleConfPath);
      var widgetPath = path.join(modulePath, 'widget', widgetName);
      if (!Util.existsSync(widgetPath)) {
        console.log(chalk.red('  出错了，当前模块没有组件' + widgetName + '！'));
        return;
      }
      var appPath = path.join(path.resolve(modulePath, '..'));
      var appConf = require(path.join(appPath, 'app-conf.js'));
      var archiver = require('archiver');
      var archive = archiver('tar', { gzip: {level: 9} });
      var tmpZipPath = path.join(modulePath, 'widget', widgetName, widgetName + '.tgz');
      var output = fs.createWriteStream(tmpZipPath);

      var prompts = [];
      var tmpchoices = [];
      // 请求业务清单
      var requestBusinessPromise = new Promise(function(resolve, reject) {
        request.get(setting.component_platform + '/api/business/list', function(err, res, body) {
          if(!err && res.statusCode === 200) {
            resolve( JSON.parse(body) );
          } else {
            reject(err);
          }
        });
      });
      // 请求类别清单
      var requestClassifyPromise = new Promise(function(resolve, reject) {
        request.get(setting.component_platform + '/api/classify/list', function(err, res, body) {
          if(!err && res.statusCode === 200) {
            resolve( JSON.parse(body) );
          } else {
            reject(err);
          }
        });
      });
      Promise.resolve().then(function() {
        return requestBusinessPromise;
      }).then(function(business) {
        if(business.length>0) {
          business.forEach(function (o, i) {
            tmpchoices.push({
              name : o.name,
              value: o.objectId
            });
          });
          prompts.push({
            type: 'list',
            name: 'business',
            message: '请选择所属业务',
            choices: tmpchoices
          });
        }

        return requestClassifyPromise;
      }).then(function(classify) {
        if(classify.length>0) {
          tmpchoices = [];
          classify.forEach(function (o, i) {
            tmpchoices.push({
              name : o.name,
              value: o.objectId
            });
          });
          prompts.push({
            type: 'list',
            name: 'classify',
            message: '请选择所属类别',
            choices: tmpchoices
          });
        }

        inquirer.prompt(prompts, function (answers) {

          var scssFilePath = path.join(widgetPath, widgetName + '.scss');
          var copyFolder = path.join(widgetPath, '_');
          var scssImportsPath = path.join(copyFolder, '_imports');
          var scssBuildCssFolder = path.join(copyFolder, '_css');
          var scssBuildCssFile = path.join(copyFolder, '_build_' + widgetName + '.css');
          del.sync(copyFolder, {force: true});
          Promise.resolve().then(function() {
            return new Promise(function(resolve, reject) {
              if(Util.existsSync(scssFilePath)) {
                // 编译SCSS并处理CSS
                var vfs = require('vinyl-fs');
                var through2 = require('through2');
                var sprites = require('peach-spritesmith');
                var pxtorem = require('postcss-pxtorem');
                var peachMate = require('../lib/build/peach_mate');
                //是否开启px转rem
                var px2rem = moduleConf.support.px2rem;
                //是否开启雪碧图合并
                var csssprite = moduleConf.support.csssprite;

                var platform = appConf.platform ? appConf.platform : 'mobile';

                var autoprefixerConf = moduleConf.support.autoprefixer;
                var browsers = [];
                if (autoprefixerConf) {
                  browsers = autoprefixerConf[platform];
                } else {
                  browsers = ['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1'];
                }

                var processors = [
                  autoprefixer({browsers: browsers})
                ];

                if( px2rem && px2rem.enable !== false ){
                  processors.push(pxtorem({
                    root_value: px2rem.root_value,
                    unit_precision: px2rem.unit_precision,
                    prop_white_list: px2rem.prop_white_list,
                    selector_black_list: px2rem.selector_black_list,
                    replace: px2rem.replace,
                    media_query: px2rem.media_query
                  }));
                }

                if(csssprite && csssprite.enable !== false){
                  var opts = {
                    outputDimensions: true,
                    stylesheetPath: scssBuildCssFolder,
                    imageFolder: 'images',
                    spritePath: path.join(copyFolder, 'images', 'sprite.png'),
                    retina: csssprite.retina || false,
                    rootValue: csssprite.rootValue,
                    padding: csssprite.padding,
                    groupBy: function (image) {
                      return image.urlSpe;
                    }
                  };
                }
                // 先拷贝组件所有内容
                vfs.src(path.join(widgetPath, '**'))
                  .pipe(vfs.dest(copyFolder))
                  .on('finish', function () {
                    // 索引 SCSS Imports
                    console.log(chalk.magenta('  正在解析SCSS引用'));
                    var imports = Util.mapScssImports(scssFilePath);
                    // 清空/创建
                    fse.emptydirSync(scssImportsPath);
                    if(imports.length > 0) {
                      imports.forEach(function (e) {
                        console.log(chalk.green(e.path));
                        var basename = path.basename(e.path);
                        fse.copySync(e.path, path.join(scssImportsPath, e.dir, basename));
                      });
                    }
                    vfs.src([path.join(copyFolder, '*.scss'), path.join(copyFolder, '*.sass')])
                    .on('finish', function () {
                      console.log(chalk.magenta('  开始组件SASS本地编译任务'));
                    })
                    .pipe(peachMate.compass({
                      cwd: appPath,
                      module: moduleConf.module,
                      sass: copyFolder,
                      css: scssBuildCssFolder,
                      sasslib : [scssImportsPath]
                    }))
                    .on('data', function () {})
                    .on('end', function () {
                      var spriteImages = [];
                      vfs.src([path.join(scssBuildCssFolder, '*.css'), path.join(copyFolder, '*.html'), path.join(copyFolder, '*.js')])
                        .pipe($.if('*.css', through2.obj(function (file, encoding, cb) {
                          if (file.isNull() || file.isStream()) {
                            return cb(null);
                          }
                          var fileContents = file.contents.toString();
                          Util.processCss(fileContents, function (value) {
                            var _value = value.replace(/\"/g, '').replace(/\'/g, '');
                            var extname = path.extname(_value);
                            var dirname = path.dirname(value);
                            var dirnameArr = dirname.split('/');
                            var imagesIndex = dirnameArr.indexOf('images');
                            if (!Util.regexps.url.test(value) && value.length > 0
                              && value.indexOf('data:image') < 0
                              && typeof extname === 'string'
                              && extname.length > 0
                              && imagesIndex >= 0) {
                              var spriteReg = /\?__sprite(.*)+/gi;
                              if (spriteReg.test(_value)) {
                                _value = _value.split('/').splice(imagesIndex).join('/').replace(spriteReg, '');
                                spriteImages.push(_value);
                              }
                            }
                            return value;
                          });
                          this.push(file);
                          cb();
                        })))
                        .pipe($.if('*.css', $.postcss(processors)))
                        .pipe($.if('*.css', $.postcss([sprites(opts)])))
                        .pipe(through2.obj(function (file, encoding, cb) {
                          if (file.isNull() || file.isStream()) {
                            return cb(null);
                          }
                          function getInline (value) {
                            var vStart = '';
                            var vEnd = '';
                            var extname = path.extname(value);
                            if (value.indexOf('\"') >= 0 || value.indexOf('\'') >= 0) {
                              vStart = value[0];
                              vEnd = value[value.length - 1];
                              value = value.replace(/\"/g, '').replace(/\'/g, '');
                            }
                            var dirname = path.dirname(value);
                            var dirnameArr = dirname.split('/');
                            var imagesIndex = dirnameArr.indexOf('images');
                            if (!Util.regexps.url.test(value) && value.length > 0
                              && value.indexOf('data:image') < 0
                              && typeof extname === 'string'
                              && extname.length > 0
                              && imagesIndex >= 0) {
                              value = value.split('/').splice(imagesIndex).join('/');
                              var pathName = path.join(copyFolder, value);
                              var query = Util.getQueryObj(pathName);
                              var size = 0;
                              pathName = pathName.split('?')[0];
                              if (!Util.existsSync(pathName)) {
                                console.log(chalk.red('  文件' + path.basename(file.path) + '中引用的资源' + value + '不存在，请检查！'));
                                return vStart + value + vEnd;
                              }
                              if (Util.regexps.images.test(path.basename(pathName))) {
                                // 判断是否有__inline标或者是打开了base64开关被excluded
                                var base64Opts = moduleConf.support.base64 || {
                                  enable: false,
                                  exclude: [],
                                  size: 5000
                                };
                                var baseExclude = base64Opts.exclude;
                                if (query.__inline || base64Opts.enable && (!baseExclude || _.isArray(baseExclude) && baseExclude.indexOf(value) === -1)) {
                                  try {
                                    size = fs.statSync(pathName).size;
                                    if (query.__inline || size < config.base64Opts.size) {
                                      return vStart + Util.transform2DataURI(pathName) + vEnd;
                                    }
                                  }
                                  catch (e) {
                                    gutil.log(gutil.colors.red('无法转base64，文件' + pathName + '没有找到！'));
                                    return vStart + value + vEnd;
                                  }
                                }
                              }
                            }
                            return vStart + value + vEnd;
                          }
                          var fileContents = file.contents.toString();
                          var fPath = file.path;
                          if (Util.regexps.css.test(fPath)) {
                            fileContents = Util.processCss(fileContents, function (value) {
                              return getInline(value);
                            });
                          } else if (Util.regexps.js.test(fPath)) {
                            fileContents = Util.processJs(fileContents, function (value) {
                              return getInline(value);
                            });
                          } else if (Util.regexps.tpl.test(fPath)) {
                            fileContents = Util.processHtml(fileContents, function (value) {
                              return getInline(value);
                            });
                          }
                          file.contents = new Buffer(fileContents);
                          this.push(file);
                          cb();
                        }))
                        .pipe(through2.obj(function (file, encoding, cb) {
                          var dirname = path.dirname(file.path);
                          var basename = path.basename(file.path);
                          if(!/_build_/.test(basename)) {
                            file.path = path.join(dirname, '_build_' + basename);
                          }
                          this.push(file);
                          cb();
                        }))
                        .pipe(vfs.dest(copyFolder))
                        .on('finish', function() {
                          del.sync(scssBuildCssFolder, {force: true});
                          fs.writeFileSync(path.join(copyFolder, '_sprite_images.json'), JSON.stringify({
                            sprites: spriteImages
                          }, null, 2));
                          resolve();
                        })
                        .on('error', function(err) {
                          console.log('编译过程发生错误');
                          reject();
                        });
                    })
                    .on('error', function (err) {
                      console.log('编译过程发生错误');
                      throw err;
                    });
                  });
              } else {
                resolve();
              }
            })
          }).then(function() {
            console.log(chalk.magenta('  正在发布组件，请稍等...'));
            archive.on('error', function(err){
              throw err;
            });
            archive.pipe(output);
            archive.bulk([
              {
                expand: true,
                cwd: copyFolder,
                src: ['**/*']
              }
            ]).finalize();
            output.on('close', function () {
              var formData = {
                appId: appConf.appId,
                moduleId: moduleConf.moduleId,
                platform: appConf.platform,
                author: config.user_name,
                widget: {
                  value: fs.createReadStream(tmpZipPath),
                  options: {
                    filename: widgetName + '.tgz',
                    contentType: 'application/x-compressed'
                  }
                }
              };
              if (answers.business) {
                formData.business = answers.business;
              }
              if (answers.classify) {
                formData.classify = answers.classify;
              }
              if (typeof widgetId === 'string' && widgetId.length) {
                formData.widgetId = widgetId;
              }
              var boundaryKey = Math.random().toString(16);
              request.post({
                url: setting.component_platform + '/api/push',
                headers: {
                  'Content-Type': 'multipart/form-data; boundary="'+ boundaryKey +'"'
                },
                formData: formData
              }, function(err, res, body) {
                if (err) {
                  del.sync(tmpZipPath, {force: true});
                  del.sync(copyFolder, {force: true});
                  throw err;
                }
                var result = null;
                try {
                  result = JSON.parse(body);
                } catch (e) {
                  result = null;
                }
                if (res.statusCode === 200) {
                  console.log(chalk.green('  组件发布成功！'));
                  del.sync(tmpZipPath, {force: true});
                  del.sync(copyFolder, {force: true});
                  if (result && result.no === 0) {
                    var data = result.data;
                    console.log(chalk.green('  请访问：' + setting.component_platform + '/#!/detail/' + data.id));
                  }
                } else {
                  del.sync(tmpZipPath, {force: true});
                  del.sync(copyFolder, {force: true});
                  if(result && result.type == 'unauth') {
                    console.log(chalk.red('  用户不在白名单之内，请联系管理人员。'));
                  } else {
                    console.log(chalk.red('  组件发布失败，请重试！'));
                  }
                }
              });
            });
          }).catch(function(err) {
            del.sync(tmpZipPath, {force: true});
            del.sync(copyFolder, {force: true});
            throw err;
          })
        });
      }).catch(function(err) {
        if(err) {
          if(err.code) {
            console.log(chalk.red('  ' + err.code));
          } else {
            console.log(err);
            throw err;
          }
        } else {
          console.log(chalk.red('  请求列表数据时出错'));
        }
      });
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach widget-publish tab');
    console.log('    $ peach wp tab');
    console.log('    $ peach wp tab --id');
    console.log();
  });

// Command: peach widget-load [widgetName]
program
  .command('widget-load [uuid]')
  .alias('wl')
  .option('-i, --id [uuid]', '组件id')
  .option('-a, --alias [widgetAlias]', '组件重命名')
  .description('加载一个远程的组件')
  .action(function (uuid, option) {
    remindNewVersion(function () {
      uuid = uuid || option.id;
      if (typeof uuid !== 'string') {
        console.log(chalk.red('  参数有误，必须告知组件id！'));
        return;
      }
      var alias = typeof option.alias === 'string' ? option.alias : null;
      var remoteUrl = setting.component_platform + '/api/pull/' + uuid;
      loadRemoteWidget(remoteUrl, uuid, option);
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach widget-load 749c39b0-4357-11e6-adbc-dfa2f92dcb1c --alias tab');
    console.log('    $ peach wl 749c39b0-4357-11e6-adbc-dfa2f92dcb1c -a tab');
    console.log();
  });

// Command: peach widget-remote [widgetName]
program
  .command('widget-remote [widgetName]')
  .alias('wr')
  .option('-w, --widget [widgetName]', '组件名称')
  .option('--debug', '打印调试信息')
  .description('加载一个远程的组件')
  .action(function(widgetName, option) {
    remindNewVersion(function () {
      widgetName = widgetName || option.widget;
      var wname = widgetName.split('~');
      var remoteUrl = setting.remote_widget_url + '?cate=' + wname[0] + '&filename=' + wname[1];
      loadRemoteWidget(remoteUrl, widgetName, option);
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach widget-remote timeline~pf_160322_1');
    console.log('    $ peach wr timeline~pf_160322_1');
    console.log();
  });

function loadRemoteWidget (remoteUrl, widgetName, option) {
  var widgetName = widgetName || option.widget;
  var widgetAlias = option.alias;
  var remoteWidgetNameUrl = setting.component_platform + '/api/widget/detail/' + widgetName;
  var widgetOriginName = '';

  function loadWidgetName () {
      return new Promise(function (resolve, reject) {
          request.get({
            url: remoteWidgetNameUrl
          },function(err, res){
            if(res.statusCode === 200){
              widgetOriginName = JSON.parse(res.body).widget.name;;
              if (typeof widgetAlias === 'string') {
                return resolve(widgetAlias);
              }else{
                return resolve(JSON.parse(res.body).widget.name);
              }
            }else{
              console.log(chalk.red('  出错了，' + remoteWidgetNameUrl + '接口出错，请联系liweitao'));
              return resolve();
            }
          });

      });
    }
  loadWidgetName()
  .then(function(widgetName){
    var widget = new Widget({
      widgetName: widgetName,
      description: option.description,
      sass: true,
      less: 0,
      cms: 0
    });
    var moduleConfPath = widget.destinationPath('module-conf.js');
    var appConfPath = path.join(path.resolve(widget.destinationRoot(), '..'), 'app-conf.js');
    if (!fs.existsSync(moduleConfPath)) {
      console.log(chalk.red('  出错了，当前目录没有module-conf.js，请检查当前目录是否是一个模块目录！'));
      return;
    }
    widget.loadRemote(remoteUrl,widgetAlias, function () {
    var argv = [].slice.call(arguments);
    widget.renameContent(argv[0], widgetOriginName);
    var appConf = require(appConfPath);
    var moduleConf = require(moduleConfPath);
    if (appConf) {
      report('widget', addReportPath, argv, function (params) {
        params.moduleName = moduleConf.module;
        params.moduleId = moduleConf.moduleId;
        params.appName = appConf.app;
        params.appId = appConf.appId;
        params.widget = argv[0];
      }, function (body) {
        if (option.debug) {
          console.log(body);
        }
      });
    }
    });
  });
}

// Command: peach delete
program
  .command('delete')
  .alias('del')
  .option('-a, --app [appName]', '项目名称')
  .option('-m, --module [moduleName]', '模块名称')
  .option('-p, --page [pageName]', '模块名称')
  .option('-w, --widget [widgetName]', '组件名称')
  .description('删除操作')
  .action(function (option) {
    remindNewVersion(function () {
      var appName = option.app;
      var moduleName = option.module;
      var pageName = option.page;
      var widgetName = option.widget;
      if (typeof(appName) !== 'string' && typeof(moduleName) !== 'string'
        && typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
        console.log(chalk.red('  请输入参数！'));
        console.log();
        console.log(chalk.red('  通过命令 ath del -h 可查看帮助'));
        console.log();
      } else {
        // 判断当前是否是项目路径或模块路径
        var cwd = process.cwd();
        var appConfPath = path.join(cwd, 'app-conf.js');
        var moduleConfPath = path.join(cwd, 'module-conf.js');
        var deleteTypes = [];
        var deletePlace = '';
        var appConf = null;
        var moduleConf = null;
        if (Util.existsSync(appConfPath)) { // 项目根目录
          if (typeof(moduleName) !== 'string') {
            console.log(chalk.red('  在项目目录下，必须告知模块名！'));
            return;
          }
          appConf = require(appConfPath);

          moduleConfPath = path.join(cwd, moduleName, 'module-conf.js');
          if (!Util.existsSync(moduleConfPath)) {
            console.log(chalk.red('  没有找到模块' + moduleName + '，请检查当前目录是否符合规范！'));
            return;
          }
          moduleConf = require(moduleConfPath);
          deletePlace = 'app';
          // 删除模块
          if (typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
            deleteTypes.push('mod');
          } else {
            if (typeof(pageName) === 'string') {
              if (!Util.existsSync(path.join(cwd, moduleName, 'page', pageName))) {
                console.log(chalk.red('  没有找到页面' + pageName + '，请检查当前目录是否符合规范！'));
                return;
              }
              deleteTypes.push('page');
            }
            if (typeof(widgetName) === 'string') {
              if (!Util.existsSync(path.join(cwd, moduleName, 'widget', widgetName))) {
                console.log(chalk.red('  没有找到组件' + widgetName + '，请检查当前目录是否符合规范！'));
                return;
              }
              deleteTypes.push('widget');
            }
          }
        } else if (Util.existsSync(moduleConfPath)) { // 模块根目录
          if (typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
            console.log(chalk.red('  在模块目录下，必须告页面名或组件名！'));
            return;
          }
          appConf = require(path.join(path.resolve(cwd, '..'), 'app-conf'));
          moduleConf = require(moduleConfPath);
          deletePlace = 'module';
          if (typeof(pageName) === 'string') {
            if (!Util.existsSync(path.join(cwd, 'page', pageName))) {
              console.log(chalk.red('  没有找到页面' + pageName + '，请检查当前目录是否符合规范！'));
              return;
            }
            deleteTypes.push('page');
          }
          if (typeof(widgetName) === 'string') {
            if (!Util.existsSync(path.join(cwd, 'widget', widgetName))) {
              console.log(chalk.red('  没有找到组件' + widgetName + '，请检查当前目录是否符合规范！'));
              return;
            }
            deleteTypes.push('widget');
          }
        } else {
          if (typeof(appName) !== 'string') {
            console.log(chalk.red('  请输入项目名！'));
            return;
          }
          var appPath = path.join(cwd, appName);
          // 项目外删除
          if (Util.existsSync(appPath)) {
            deletePlace = 'outside';
            appConf = require(path.join(appPath, 'app-conf'));
            if (typeof(moduleName) !== 'string'
              && typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
              deleteTypes.push('app');
            } else {
              if (typeof(moduleName) !== 'string') {
                console.log(chalk.red('  请输入模块名！'));
                return;
              } else {
                moduleConfPath = path.join(appPath, moduleName, 'module-conf.js');
                if (!Util.existsSync(moduleConfPath)) {
                  console.log(chalk.red('  没有找到模块' + moduleName + '，请检查当前目录是否符合规范！'));
                  return;
                }
                moduleConf = require(moduleConfPath);
                if (typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
                  deleteTypes.push('mod');
                } else {
                  if (typeof(pageName) === 'string') {
                    if (!Util.existsSync(path.join(appPath, moduleName, 'page', pageName))) {
                      console.log(chalk.red('  没有找到页面' + pageName + '，请检查当前目录是否符合规范！'));
                      return;
                    }
                    deleteTypes.push('page');
                  }
                  if (typeof(widgetName) === 'string') {
                    if (!Util.existsSync(path.join(appPath, moduleName, 'widget', widgetName))) {
                      console.log(chalk.red('  没有找到组件' + widgetName + '，请检查当前目录是否符合规范！'));
                      return;
                    }
                    deleteTypes.push('widget');
                  }
                }
              }
            }
          } else {
            console.log(chalk.red('  没有找到相应项目，请检查当前目录是否符合规范！'));
            return;
          }
        }
        deleteOperation({
          deleteTypes: deleteTypes,
          deletePlace: deletePlace,
          appName: appName,
          moduleName: moduleName,
          pageName: pageName,
          widgetName: widgetName,
          appConf: appConf,
          moduleConf: moduleConf
        });
      }
    });
  }).on('--help', function () {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach delete -a cx');
    console.log('    $ peach delete -m tz');
    console.log();
  });

/**
 * 删除操作，根据当前所处不同位置
 */
function deleteOperation (deleteObj) {
  if (!deleteObj) {
    return;
  }
  var cwd = process.cwd();
  switch (deleteObj.deletePlace) {
    case 'outside':
      cwd = path.join(cwd, deleteObj.appName);
      deleteSth(cwd, deleteObj);
      break;
    case 'app':
      deleteSth(cwd, deleteObj);
      break;
    case 'module':
      deleteObj.moduleName = require(path.join(cwd, 'module-conf')).module;
      cwd = path.resolve(cwd, '..');
      deleteSth(cwd, deleteObj);
      break;
  }
}

/**
 * 删除项目，模块，页面，组件，并上报数据
 */
function deleteSth (cwd, deleteObj) {
  if (deleteObj.deleteTypes.indexOf('app') >= 0) { //删除项目
    deleteAtomic('app', '是否删除项目' + deleteObj.appName, cwd, null, function (params) {
      params.app = deleteObj.appConf.appId;
    });
  } else if (deleteObj.deleteTypes.indexOf('mod') >= 0) {
    deleteAtomic('module', '是否删除模块' + deleteObj.moduleName, path.join(cwd, deleteObj.moduleName),
      function () {
        var appConfFile = fs.readFileSync(path.join(cwd, 'app-conf.js'));
        var appConfStr = String(appConfFile);
        var appConfStrLines = appConfStr.split('\n');
        var moduleList = deleteObj.appConf.moduleList;
        var moduelIndex = moduleList.indexOf(deleteObj.moduleName);
        if (moduelIndex >= 0) {
          moduleList.splice(moduelIndex, 1);
          for (var i = 0; i < appConfStrLines.length; i++) {
            var line = appConfStrLines[i];
            if (line.indexOf('moduleList') >= 0) {
              appConfStrLines[i] = appConfStrLines[i].replace(/\[(.*)\]/, function (m) {
                var ret = '[';
                moduleList.forEach(function (item, i) {
                  ret += '\'' + item + '\'';
                  if (i < moduleList.length - 1) {
                    ret += ', ';
                  }
                });
                ret += ']';
                return ret;
              });
            }
          }
          fs.writeFileSync(path.join(cwd, 'app-conf.js'), appConfStrLines.join('\n'));
        }
      }, function (params) {
        params.mod = deleteObj.moduleConf.moduleId;
      });
  } else {
    if (deleteObj.deleteTypes.indexOf('page') >= 0) {
      deleteAtomic('page', '是否删除页面' + deleteObj.pageName, path.join(cwd, deleteObj.moduleName, 'page', deleteObj.pageName), null, function (params) {
        params.mod = deleteObj.moduleConf.moduleId;
        params.page = deleteObj.pageName;
      });
    }

    if (deleteObj.deleteTypes.indexOf('widget') >= 0) {
      deleteAtomic('widget', '是否删除组件' + deleteObj.widgetName, path.join(cwd, deleteObj.moduleName, 'widget', deleteObj.widgetName), null, function (params) {
        params.mod = deleteObj.moduleConf.moduleId;
        params.widget = deleteObj.widgetName;
      });
    }
  }
}

/**
 * 删除目录文件
 */
function deleteAtomic (cmd, confirmTip, delelePath, deleteCb, processParamsCb) {
  inquirer.prompt([{
    type: 'confirm',
    name: 'confirmDelete',
    message: confirmTip,
    default: false
  }], function (answers) {
    if (answers.confirmDelete) {
      del.sync(delelePath, {force: true});
      if (_.isFunction(deleteCb)) {
        deleteCb();
      }
      console.log();
      console.log(chalk.green('  删除成功！'));
      console.log();
      report(cmd, deleteReportPath, undefined, processParamsCb);
    }
  });
}

program
  .command('build')
  .alias('b')
  .description('编译项目or模块')
  .option('-a, --app [appName]', '编译项目')
  .option('-m, --module [moduleName]', '编译模块', function (val) {
    return val.split(',');
  })
  .option('--verbose', '编译详细信息')
  .option('--pack', '打包功能，输出静态稿')
  .option('--compress', '打包功能，输出静态稿，引用压缩后的静态资源')
  .option('--remote [remoteName]', '目标机器，根据app-conf.js中的配置')
  .option('--release', '发布功能')
  .option('--allin', '压缩文件，server模式专用')
  .action(function (option) {
    remindNewVersion(function () {
      var app = null;
      var mod = null;
      // 带参数
      if (option) {
        if (typeof option.app === 'string') {
          app = option.app;
        }
        if (option.module && typeof option.module.sort === 'function') {
          mod = option.module;
        }
      }
      builder.build(app, mod, option);
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach build');
    console.log('    $ peach build -a cx');
    console.log('    $ peach build -m tz');
    console.log();
  });

program
  .command('serve')
  .alias('s')
  .description('预览项目or模块')
  .option('-a, --app [appName]', '预览项目')
  .option('-m, --module [moduleName]', '预览模块', function (val) {
    return val.split(',');
  })
  .option('--page [pageName]', '预览页面')
  .option('--verbose', '编译详细信息')
  .option('--dist', '预览经过完整编译流程后的文件')
  .option('-s, --silence', '静默不主动开启浏览器')
  .action(function (option) {
    remindNewVersion(function () {
      var app = null;
      var mod = null;
      // 带参数
      if (option) {
        if (typeof option.app === 'string') {
          app = option.app;
        }
        if (option.module && typeof option.module.sort === 'function') {
          mod = option.module;
        }
      }
      builder.serve(app, mod, option);
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach serve');
    console.log('    $ peach serve -a cx');
    console.log('    $ peach serve -m tz');
    console.log();
  });

program
  .command('publish')
  .alias('pu')
  .description('发布项目or模块，发布到预览机以及自定义开发机')
  .option('-a, --app [appName]', '发布项目')
  .option('-m, --module [moduleName]', '发布模块', function (val) {
    return val.split(',');
  })
  .option('-n, --noImage', '不发布图片')
  .option('--pack', '打包功能，输出静态稿')
  .option('--compress', '打包功能，输出静态稿，引用压缩后的静态资源')
  .option('--verbose', '发布详细信息')
  .option('--remote [remoteName]', '目标机器，根据app-conf.js中的配置')
  .option('--domain [domainName]', '目标机器域名')
  .option('--fdPath [fdPathName]', '发布后文件路径目录')
  .option('--remotePath [remotePath]', '上传静态文件目录')
  .option('--cssi [cssiPath]', '上传页面片目录')
  .option('--all', '发布所有页面')
  .option('--allres', '发布所有资源')
  .option('--showall', '展示上线页面所有需要被上线的资源')
  .option('--debug', '打印调试信息')
  .action(function (option) {
    remindNewVersion(function () {
      var app = null;
      var mod = null;
      var isDebug = false;
      // 带参数
      if (option) {
        isDebug = option.debug ? true : false;
        if (typeof option.app === 'string') {
          app = option.app;
        }
        if (option.module && typeof option.module.sort === 'function') {
          mod = option.module;
        }
      }
      function checkVersionControl () {
        return new Promise(function (resolve, reject) {
          var cwd = process.cwd();
          var appConfPath = path.join(cwd, 'app-conf.js');
          var moduleConfPath = path.join(cwd, 'module-conf.js');
          var appConf = null;
          var versionControl = null;
          if (Util.existsSync(appConfPath)) {
            // 项目根目录
            appConf = require(appConfPath);
          } else if (Util.existsSync(moduleConfPath)) {
            // 模块目录
            appConfPath = path.join(path.resolve(cwd, '..'), 'app-conf.js');
            if (Util.existsSync(appConfPath)) {
              appConf = require(appConfPath);
            }
          }
          if (appConf !== null) {
            versionControl = appConf.versionControl;
            if (typeof versionControl === 'string' && versionControl === 'git') {
              return resolve();
            }
          }
          return reject('Version control check error');
        });
      }
      checkVersionControl()
        .then(getGitStatus).then(function (status) {
        if (!status.remoteBranch) {
          console.log();
          console.log(chalk.red('  检测到当前项目并未设置远程仓库，或者已经设置但并未提交代码！'));
          console.log(chalk.red('  请将代码push到远程仓库后再进行发布！'));
          console.log();
          throw new Error('git interrupt');
        }
        if (status.clean) {
          if (typeof status.remoteDiff === 'string' && status.remoteDiff.indexOf('ahead') >= 0) {
            console.log();
            console.log(chalk.red('  检测到你有本地提交，但并未将代码提交至远程仓库！'));
            console.log(chalk.red('  请将代码push到远程仓库后再进行发布！'));
            console.log();
            throw new Error('git interrupt');
          }
        } else {
          console.log();
          console.log(chalk.red('  检测到你本地有代码改动！'));
          console.log();
          if (status.files.length > 0) {
            status.files.forEach(function (item) {
              console.log(chalk.red('    ' + item));
            });
          }
          console.log();
          console.log(chalk.red('  请将代码push到远程仓库后再进行发布！'));
          console.log();
          throw new Error('git interrupt');
        }
      }, function (err) {
        if (isDebug) {
          console.log(err);
        }
      }).then(builder.publish.bind(null, app, mod, option)).then(function (argv) {
        var args = argv.files;
        if (argv.appConf) {
          report('publish', addReportPath, args, function (params) {
            params.appId = argv.appConf.appId;
          });
        }
      }).catch(function (e) {
        if (e.message !== 'git interrupt') {
          console.log(e.stack);
        }
      });
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach publish');
    console.log('    $ peach publish -a cx');
    console.log('    $ peach publish -m tz');
    console.log();
  });

program
  .command('clone [widget]')
  .description('复制一个widget')
  .option('-f, --from [source]', '来源模块')
  .option('-t, --to [dest]', '目标模块，不写则当前目录')
  .action(function (widget, option) {
    remindNewVersion(function () {
      if (widget === undefined) {
        gutil.log(gutil.colors.red('请输入widgetName'));
        return;
      }
      var source = null;
      var dest = null;
      // 带参数
      if (option) {
        if (typeof option.from === 'string') {
          source = option.from;
        }
        if (typeof option.to === 'string') {
          dest = option.to;
        }
      }
      builder.clone(widget, source, dest);
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach clone widgetName');
    console.log('    $ peach clone widgetName --from moduleName');
    console.log('    $ peach clone widgetName --from moduleName --to moduleName');
    console.log();
  });

program
  .command('map')
  .description('列出引用关系')
  .option('-m, --module [moduleName]', '模块选项')
  .option('-w, --widget [widgetName]', '组件选项')
  .action(function (option) {
    remindNewVersion(function () {
      var moduleName = option.module;
      var widgetName = option.widget;
      if (typeof(moduleName) !== 'string' && typeof(widgetName) !== 'string') {
        console.log(chalk.red('  请输入参数！'));
        console.log();
        console.log(chalk.red('  通过命令 ath map -h 可查看帮助'));
        console.log();
      } else {
        // 判断当前是否是项目路径或模块路径
        var cwd = process.cwd();
        var appConfPath = path.join(cwd, 'app-conf.js');
        var moduleConfPath = path.join(cwd, 'module-conf.js');
        var appConf = null;
        var moduleConf = null;
        var appPath = '';
        if (Util.existsSync(appConfPath)) { // 项目根目录
          if (typeof(moduleName) !== 'string') {
            console.log(chalk.red('  在项目目录下，必须告知模块名！'));
            return;
          }
          if (typeof(widgetName) !== 'string') {
            console.log(chalk.red('  请告知组件名称！'));
            return;
          }
          var isWidgetExist = Util.existsSync(path.join(cwd, moduleName, 'widget', widgetName));
          if (!isWidgetExist) {
            console.log(chalk.red('  该模块下并不存在组件' + widgetName + '！'));
            return;
          }
          appConf = require(appConfPath);
          appPath = cwd;
        } else if (Util.existsSync(moduleConfPath)) { // 模块根目录
          if (typeof(widgetName) !== 'string') {
            console.log(chalk.red('  请告知组件名称！'));
            return;
          }
          var isWidgetExist = Util.existsSync(path.join(cwd, 'widget', widgetName));
          if (!isWidgetExist) {
            console.log(chalk.red('  该模块下并不存在组件' + widgetName + '！'));
            return;
          }
          appPath = path.resolve(cwd, '..');
          appConf = require(path.join(appPath, 'app-conf.js'));
          moduleConf = require(moduleConfPath);
          moduleName = moduleConf.module;
        } else {
          console.log(chalk.red('  当前目录既不是项目目录也不是模块目录！'));
          return;
        }
        var dependencyList = [];
        if (moduleName === appConf.common) {
          var moduleList = appConf.moduleList;
          moduleList.forEach(function (item) {
            var dependencyListArr = getModuleMapDenpencyByWidget(appPath, item, widgetName);
            dependencyList = dependencyList.concat(dependencyListArr);
          });
        } else {
          dependencyList = getModuleMapDenpencyByWidget(appPath, moduleName, widgetName);
        }
        if (dependencyList.length === 0) {
          return;
        }
        // 画出依赖表格
        var table = new Table({
          head: ['module', 'page'],
          colWidths: [20, 40],
          style: { head: ['bgGreen'] }
        });
        dependencyList.forEach(function (item) {
          table.push([item.module, item.page]);
        });
        console.log();
        console.log(chalk.green(moduleName + '模块组件' + widgetName + '被以下页面所引用：'));
        console.log(table.toString());
        console.log();
      }
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach map -m module -w tab');
    console.log('    $ peach map -w tab');
    console.log();
  });

function getModuleMapDenpencyByWidget (appPath, moduleName, widgetName) {
  var mapJsonPath = path.join(appPath, moduleName, 'dist', 'map.json');
  var dependencyList = [];
  if (Util.existsSync(mapJsonPath)) {
    var mapJson = Util.readJsonFile(mapJsonPath);
    var dependency = mapJson.dependency;
    for (var key in dependency) {
      dependency[key].forEach(function (di) {
        if (di.widgetName === widgetName) {
          dependencyList.push({
            module: moduleName,
            page: key
          });
        }
      });
    }
  } else {
    console.log(chalk.red('  项目' + moduleName + '还没被编译，无法列出依赖关系，请先编译！'));
  }
  return dependencyList;
}

program
  .command('clear')
  .alias('cl')
  .description('清除缓存')
  .option('-p, --publish [remoteName]', '清除发布时的缓存')
  .option('-t, --template', '清除模板缓存')
  .option('-s, --sass', '清除sass编译缓存')
  .option('-i, --image', '清除图片压缩缓存')
  .option('-a, --app [appName]', '项目')
  .option('-m, --module [moduleName]', '模块')
  .action(function (option) {
    remindNewVersion(function () {
      var peachPath = Util.getpeachPath()
      var cacheRootPath = null
      if (typeof option !== 'object') {
        console.log();
        console.log(chalk.red('  输入参数有误！'));
        console.log(chalk.red('  请通过 ath clear -h 查看帮助！'));
        console.log();
        return;
      }
      var cwd = process.cwd();
      var appConfPath = path.join(cwd, 'app-conf.js');
      var moduleConfPath = path.join(cwd, 'module-conf.js');
      if (Util.existsSync(appConfPath)) {
        cacheRootPath = path.join(cwd, Util.CACHE)
      } else if (Util.existsSync(moduleConfPath)) {
        cacheRootPath = path.join(path.resolve(cwd, '..'), Util.CACHE)
      } else {
        console.log();
        console.log(chalk.red('  必须在项目或模块目录下执行此命令！'));
        console.log();
        return;
      }
      var mod = option.module ? option.module : null;
      if (option.publish || option.template || option.sass || option.image) {
        if (option.publish) {
          var publish = option.publish;
          if (Util.existsSync(appConfPath)) {
            if (mod !== null) {
              if (typeof publish === 'string') {
                del.sync(path.join(cacheRootPath, 'publish', mod, publish + '_filter.json'), { force: true });
              } else {
                del.sync(path.join(cacheRootPath, 'publish', mod), { force: true });
              }
            } else {
              del.sync(path.join(cacheRootPath, 'publish'), { force: true });
            }
          } else if (Util.existsSync(moduleConfPath)) {
            if (typeof publish === 'string') {
              del.sync(path.join(cacheRootPath, 'publish', require(moduleConfPath).module, publish + '_filter.json'), { force: true });
            } else {
              del.sync(path.join(cacheRootPath, 'publish', require(moduleConfPath).module), { force: true });
            }
          }
        } else if (option.sass) {
          if (Util.existsSync(appConfPath)) {
            if (mod !== null) {
              del.sync(path.join(cacheRootPath, 'sass', mod), { force: true });
            } else {
              del.sync(path.join(cacheRootPath, 'sass'), { force: true });
            }
          } else if (Util.existsSync(moduleConfPath)) {
            del.sync(path.join(cacheRootPath, 'sass', require(moduleConfPath).module), { force: true });
          }
        } else if (option.image) {
          if (Util.existsSync(appConfPath)) {
            if (mod !== null) {
              del.sync(path.join(cacheRootPath, 'images', mod), { force: true });
            } else {
              del.sync(path.join(cacheRootPath, 'images'), { force: true });
            }
            del.sync(path.join(cacheRootPath, 'images'), { force: true });
          } else if (Util.existsSync(moduleConfPath)) {
            del.sync(path.join(cacheRootPath, 'images', require(moduleConfPath).module), { force: true });
          }
        } else if (option.template) {
          del.sync(path.join(peachPath, 'tmp'), { force: true });
        }
      } else {
        del.sync(path.join(peachPath, 'tmp'), { force: true });
        if (Util.existsSync(appConfPath)) {
          if (mod !== null) {
            del.sync(path.join(cacheRootPath, 'publish', mod), { force: true });
            del.sync(path.join(cacheRootPath, 'sass', mod), { force: true });
            del.sync(path.join(cacheRootPath, 'images', mod), { force: true });
          } else {
            del.sync(cacheRootPath, { force: true });
          }
        } else if (Util.existsSync(moduleConfPath)) {
          del.sync(path.join(cacheRootPath, 'publish', require(moduleConfPath).module), { force: true });
          del.sync(path.join(cacheRootPath, 'sass', require(moduleConfPath).module), { force: true });
          del.sync(path.join(cacheRootPath, 'images', require(moduleConfPath).module), { force: true });
        }
      }
      console.log();
      console.log(chalk.green('  清除成功！'));
      console.log();
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach clear --publish preview');
    console.log('    $ ath cl -p preview');
    console.log('    $ peach clear --template');
    console.log('    $ ath cl -t');
    console.log('    $ peach clear --sass');
    console.log('    $ ath cl -s');
    console.log('    $ peach clear --image');
    console.log('    $ ath cl -i');
    console.log('    $ peach clear --image --module home');
    console.log('    $ ath cl -i -m home');
    console.log();
  });

program
  .command('update')
  .alias('up')
  .option('--debug', '打印调试信息')
  .description('更新peach')
  .action(function (option) {
    var isDebug = option.debug ? true : false;
    printpeach();
    // 检测版本，若版本旧则更新
    checkpeachVersion(function (versionServer, versionNative, compareResult) {
      switch (compareResult) {
        case 0:
          console.log();
          console.log(chalk.green('  当前已经是最新版本peach！'));
          console.log();
          break;
        case -1:
          console.log();
          console.log(chalk.red('  服务器端记录的peach版本竟然比本地更旧，请反馈给liweitao或wuwenwei！'));
          console.log();
          break;
        case 1:
          console.log();
          const spinner = ora('最新的peach版本号为' + versionServer + '，正在自动更新...').start()
          installpeach({
            version: versionServer,
            isDebug: isDebug
          }, spinner);
          break;
      }
    }, function (info) {
      console.log();
      console.log(chalk.red('   服务器出错，请稍后再试！'));
      console.log();
      info ? console.log(info) : void(0);
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach update');
    console.log('    $ ath up');
    console.log();
  });

program
  .command('list-config')
  .alias('lc')
  .description('列出配置项')
  .action(function () {
    remindNewVersion(function () {
      var config = Util.getConfig();
      console.log('  配置地址：' + path.join(Util.getpeachPath(), 'config.json'));
      for (var i in config) {
        console.log('  ' + i + '=' + config[i]);
      }
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach list-config');
    console.log('    $ ath lc');
    console.log();
  });

program
  .command('list-setting')
  .alias('ls')
  .description('列出设置项')
  .action(function () {
    remindNewVersion(function () {
      var setting = Util.getSetting();
      console.log('  设置地址：' + path.join(Util.getRootPath(), '.setting.json'));
      for (var i in setting) {
        console.log('  ' + i + '=' + setting[i]);
      }
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ peach list-setting');
    console.log('    $ ath ls');
    console.log();
  });

program
  .command('*')
  .action(function () {
    console.log('    ' + chalk.red('没有该命令哟，请通过 peach -h 查看帮助！'));
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  printpeach();
  program.outputHelp();
}
